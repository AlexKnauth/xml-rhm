#lang rhombus/and_meta

import:
  rhombus.values as rhm_values
  xml/util/datatype.datatype
  xml/util/list.flatten
  xml/util/list.splitf_at
  xml/util/megaparsack as mpc
  xml/util/pretty_expressive as pe
  xml/util/string.string_join
  xml/util/string.string_split
  lib("xml/main.rkt") as rktxml:
    rename:
      #{collapse-whitespace} as collapse_whitespace

export:
  AttributeValue
  Attributes
  Value

// ---------------------------------------------------------

// Datatype for XML / HTML

annot.macro 'AttributeValue':
  'String || True'
// True is for HTML5-style boolean attributes

namespace Attributes
annot.macro 'Attributes':
  'Map.of(String, AttributeValue)'

namespace Values
annot.macro 'Values':
  'List.of(Value)'

datatype Value
| Comment(string :: String)
| Text(string :: String)
| CData(string :: String)
| Element(tag :: String, attributes :: Attributes, children :: Values)

fun
| Value.is_text(v :: Value.Text): #true
| Value.is_text(_): #false

fun Value.is_nontext(v): !Value.is_text(v)

// ---------------------------------------------------------

// Pretty Printing

fun Values.pretty_print(v):
  pe.pretty_print(Values.doc(v))

fun Values.pretty_println(v):
  pe.pretty_print(Values.docln(v))

fun Values.pretty_format(v):
  to_string(pe.pretty_format(Values.doc(v)))

fun Values.pretty_formatln(v):
  to_string(pe.pretty_format(Values.docln(v)))

fun Values.docln(v):
  pe.u_append(Values.doc(v), pe.hard_nl)

fun
| Value.doc(Value.Text(s)):
    pe.text(s)
| Value.doc(Value.Element(name, {k: v, ...}, [])):
    wrap_children(pe.u_append(pe.text("<"), pe.text(name)),
                  pe.space,
                  [Attributes.entry_doc(k, v), ...],
                  pe.text("/>"))
| Value.doc(Value.Element(name, {k: v, ...}, children)):
    wrap_children(wrap_children(pe.u_append(pe.text("<"), pe.text(name)),
                                pe.nl,
                                [Attributes.entry_doc(k, v), ...],
                                pe.text(">")),
                  pe.empty_doc,
                  [Values.doc(children)],
                  pe.u_append(pe.text("</"), pe.text(name), pe.text(">")))

fun wrap_children(before, space, [child, ...], after):
  pe.alt(pe.v_append(before,
                     pe.a_append(pe.text("    "), pe.v_append(child, ...)),
                     after),
         pe.flatten(pe.u_append(before, pe.a_append(space, child),..., after)))

fun Values.doc(vs):
  let ds: Values.docs(vs)
  pe.alt(pe.v_append(& ds),
         pe.flatten(pe.u_append(& ds)))

fun Values.docs(vs):
  let [ts, rst1]: splitf_at(vs, Value.is_text)
  let [nts, rst2]: splitf_at(rst1, Value.is_nontext)
  match [ts, nts]
  | [[], []]: rst2
  | [[], nts]: nts.map(Value.doc) ++ Values.docs(rst2)
  | [ts, nts]:
      [pe.vs_append(ts.map(Value.doc))] ++ nts.map(Value.doc) ++ Values.docs(rst2)

fun
| Attributes.entry_doc(k, #true):
    pe.text(k)
| Attributes.entry_doc(k, v :: String):
    pe.u_append(pe.text(k), pe.text("="), pe.text(to_string(v, ~mode: #'expr)))

// ---------------------------------------------------------

// Parsing

def string_nlgws_p: mpc.string_ne_p("</=>\\\" \n")
def string_nlg_p: mpc.string_ne_p("</=>\\\"")

def Value.Text.p:
  mpc.do:
    s <-: string_nlgws_p
    mpc.pure(Value.Text(s))

def Attributes.entry_p:
  mpc.do:
    name <-: string_nlgws_p
    mpc.or_p(
      mpc.do:
        mpc.string_p("=\"")
        val <-: string_nlg_p
        mpc.string_p("\"")
        mpc.pure([name, val]),
      mpc.do:
        mpc.lookahead_p(mpc.or_p(mpc.space_p, mpc.string_p(">")))
        mpc.pure([name, #true]))

def Attributes.p:
  mpc.do:
    PairList[[k, v], ...] <-:
      mpc.many_p(mpc.do: mpc.noncommittal_p(mpc.ws_p); Attributes.entry_p)
    mpc.pure({k: v, ...})

def Value.Element.p:
  mpc.do:
    name <-: mpc.try_p(mpc.do:
                         mpc.string_p("<")
                         string_nlgws_p)
    attrs <-: Attributes.p
    mpc.mws_p
    mpc.or_p(
      mpc.do:
        mpc.string_p("/>")
        mpc.pure(Value.Element(name, attrs, [])),
      mpc.do:
        mpc.string_p(">")
        cs <-: Values.p
        mpc.mws_p
        mpc.string_p("</")
        mpc.string_p(name)
        mpc.string_p(">")
        mpc.pure(Value.Element(name, attrs, cs)))

def Value.p:
  mpc.or_p(Value.Text.p, Value.Element.p)

def Values.p:
  mpc.do:
    PairList[c, ...] <-:
      mpc.many_p(mpc.do: mpc.noncommittal_p(mpc.mws_p); Value.p)
    mpc.pure([c, ...])

fun Values.from_string(s :: String):
  mpc.parse_result(
    mpc.parse_string(
      mpc.do:
        v <-: Values.p
        mpc.eof_p
        mpc.pure(v),
      s))

check:
  Values.from_string("aoeu")
  ~is [Value.Text("aoeu")]
check:
  Values.from_string("<aoeu/>")
  ~is [Value.Element("aoeu", {}, [])]
check:
  Values.from_string("<a>b</a>")
  ~is [Value.Element("a", {}, [Value.Text("b")])]
check:
  Values.from_string("<a><b/></a>")
  ~is [Value.Element("a", {}, [Value.Element("b", {}, [])])]

check:
  Values.from_string(
    @str{<form method="get" action="next">label</form>})
  ~is [Value.Element("form",
                     {"method": "get", "action": "next"},
                     [Value.Text("label")])]

check:
  Values.from_string(
    @str{<body bgcolor="white"><form method="get" action="next">label</form></body>})
  ~is [Value.Element("body",
                     {"bgcolor": "white"},
                     [Value.Element("form",
                                    {"method": "get", "action": "next"},
                                    [Value.Text("label")])])]

check:
  Values.from_string(
    @str{<body bgcolor="white"><form method="get" action>label</form></body>})
  ~is [Value.Element("body",
                     {"bgcolor": "white"},
                     [Value.Element("form",
                                    {"method": "get", "action": #true},
                                    [Value.Text("label")])])]

// ---------------------------------------------------------

// Smarter Constructors

annot.macro 'AttributeEntryValue':
  'maybe(AttributeValue)'

fun Attributes.get(attrs :: Attributes, k :: String) :: AttributeEntryValue:
  Map.get(attrs, k, #false)

fun Attributes.set(attrs :: Attributes, k :: String, v :: AttributeEntryValue):
  if v
  | attrs ++ {k: v}
  | attrs.remove(k)

fun Attributes.from_entries(& entries) :: Attributes:
  for Map ([k :: String, v :: AttributeEntryValue]: entries):
    keep_when: v
    rhm_values(k, v)

fun txt(strs):
  string_split(str(strs)).map(Value.Text)

meta:
  syntax_class Boolean:
    kind: ~term
  | '#true'
  | '#false'

  syntax_class AttributeEntryValue:
    kind: ~group
    fields: value
  | '«$(value :: String)»'
  | '«$(value :: Boolean)»'
  | '«$'$'$(value :: Term)»'

  syntax_class AttributeEntry:
    kind: ~group
    fields: entry
  | '«$(k :: Identifier)»':
      field name: to_string(k)
      field entry: '[$name, #true]'
  | '«$(k :: Identifier): $(v :: AttributeEntryValue)»':
      field name: to_string(k)
      field entry: '[$name, $v.value]'

expr.macro
| '«values'«$'$'$x»'»': 'flatten($x)'
| '«values'«$(s :: String)»'»': 'txt([$s])'
| '«values'«$(id :: Identifier)»'»':
    let name: to_string(id)
    '«[Value.Element($name, {}, [])]»'
| '«values'«$(id :: Identifier) {$(e :: AttributeEntry), ...}»'»':
    let name: to_string(id)
    '«[Value.Element($name,
                     Attributes.from_entries($(e.entry), ...),
                     [])]»'
| '«values'«$(id :: Identifier): $b; ...»'»':
    let name: to_string(id)
    '«[Value.Element($name, {}, List.append(values'$b', ...))]»'
| '«values'«$(id :: Identifier) {$(e :: AttributeEntry), ...}: $b; ...»'»':
    let name: to_string(id)
    '«[Value.Element($name,
                     Attributes.from_entries($(e.entry), ...),
                     List.append(values'$b', ...))]»'

block:
  let x: Value.Text("aoeu")
  check:
    values'$x'
    ~is [Value.Text("aoeu")]
  check:
    values'"snth"'
    ~is [Value.Text("snth")]
  check:
    values'a: $x'
    ~is [Value.Element("a", {}, [Value.Text("aoeu")])]
  check:
    values'a {b: #false}: $x'
    ~is [Value.Element("a", {}, [Value.Text("aoeu")])]
  check:
    values'a {b}: $x'
    ~is [Value.Element("a", {"b": #true}, [Value.Text("aoeu")])]
  check:
    values'a {b: #true}: $x'
    ~is [Value.Element("a", {"b": #true}, [Value.Text("aoeu")])]
  check:
    values'a {b: $("c" ++ "d")}: $x'
    ~is [Value.Element("a", {"b": "cd"}, [Value.Text("aoeu")])]

check:
  values'"asonetuh"'
  ~is [Value.Text("asonetuh")]

check:
  values'a: "b"'
  ~is [Value.Element("a", {}, [Value.Text("b")])]
check:
  values'a {}: "b"'
  ~is [Value.Element("a", {}, [Value.Text("b")])]

check:
  values'a {c: "c"}: "b"'
  ~is [Value.Element("a", {"c": "c"}, [Value.Text("b")])]
check:
  values'a {c}: "b"'
  ~is [Value.Element("a", {"c": #true}, [Value.Text("b")])]

check:
  values'html:
          head: title: "Enter a Number to Add"
          body {bgcolor: "white"}:
            form {action: "next", method: "get"}:
             "label"'
  ~is [Value.Element(
         "html",
         {},
         [Value.Element(
            "head",
            {},
            [Value.Element("title", {}, @txt{Enter a Number to Add})]),
          Value.Element(
            "body",
            {"bgcolor": "white"},
            [Value.Element(
               "form",
               {"action": "next", "method": "get"},
               [Value.Text("label")])])])]

// ---------------------------------------------------------

expr.macro check_values
| 'check_values: $stx; ([$(str :: String), ...])':
    let s: String.append(Syntax.unwrap(str), ...)
    'block:
       check:
         Values.pretty_print(values $stx)
         ~prints: $s
       check:
         Values.pretty_format(Values.from_string($s))
         ~is Values.pretty_format(values $stx)'

check_values:
  '"Enter a Number to Add"'
  @{Enter a Number to Add}

check_values:
  'a:
     "The first of two lines of text."
     "And another one, as I informed you above."'
  @{<a>The first of two lines of text. And another one, as I informed you above.</a>}

check_values:
  'a:
     "The first of two lines of text, long enough to be put on different lines."
     "And another one, I told you there'd be two long lines of text."'
  @{
  <a>
      The first of two lines of text, long enough to be put on different lines.
      And another one, I told you there'd be two long lines of text.
  </a>}

check_values:
  'a:
     "There"
     "are"
     "a"
     "lot"
     "of"
     "really"
     "short"
     "lines"
     "here,"
     "aren't"
     "there."
     "Will"
     "it"
     "do"
     "any"
     "line"
     "wrapping?"'
  @{
  <a>
      There are a lot of really short lines here, aren't there. Will it do any
      line wrapping?
  </a>}

check_values:
  'html:
     head: title: "Enter a Number to Add"
     body {bgcolor: "white"}:
       form {action: "next", method: "get"}:
        "label"'
  @{
  <html>
      <head><title>Enter a Number to Add</title></head>
      <body bgcolor="white"><form method="get" action="next">label</form></body>
  </html>}

check_values:
  'html:
     head: title: "Enter a Number to Add"
     body {bgcolor: "white"}:
       form {action, method: "get"}:
        "label"'
  @{
  <html>
      <head><title>Enter a Number to Add</title></head>
      <body bgcolor="white"><form method="get" action>label</form></body>
  </html>}

check_values:
  'HKSMButton {className: "arrow-button",
               onClick: "onClick",
               id: "id",
               disabled: "disabled"}:
     img {src: "arrow",
          alt: "decorative arrow",
          className: "arrow arrow-left"}
     span {className: "button-text"}: "text"
     img {src: "arrow",
          alt: "decorative arrow",
          className: "arrow arrow-right"}'
  @{
  <HKSMButton
      id="id"
      onClick="onClick"
      disabled="disabled"
      className="arrow-button"
  >
      <img src="arrow" className="arrow arrow-left" alt="decorative arrow"/>
      <span className="button-text">text</span>
      <img src="arrow" className="arrow arrow-right" alt="decorative arrow"/>
  </HKSMButton>}

check_values:
  'HKSMButton {className: "arrow-button",
               onClick: "onClick",
               id: "id",
               disabled: "disabled"}:
     img {src: "arrow",
          alt: "decorative arrow",
          className: "arrow arrow-left",
          size: "1.5em"}
     span {className: "button-text"}: "text"
     img {src: "arrow",
          alt: "decorative arrow",
          className: "arrow arrow-right",
          size: "1.5em"}'
  @{
  <HKSMButton
      id="id"
      onClick="onClick"
      disabled="disabled"
      className="arrow-button"
  >
      <img
          className="arrow arrow-left"
          alt="decorative arrow"
          size="1.5em"
          src="arrow"
      />
      <span className="button-text">text</span>
      <img
          className="arrow arrow-right"
          alt="decorative arrow"
          size="1.5em"
          src="arrow"
      />
  </HKSMButton>}

